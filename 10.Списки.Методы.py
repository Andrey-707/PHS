# Python_Hub_Studio
# Python_7_Hours

# СПИСКИ.
# !!! СПИСКИ ОТНОСЯТСЯ К ИЗМЕНЯЕМЫМ ТИПАМ ДАННЫХ!!!

# Методы списков

# метод .append() добавляет элемент в конец списка
x = [9, 8, 7, 6, 5]
x.append(4)
print(x) # OUT: [9, 8, 7, 6, 5, 4]

# метод .insert() добавляет элемент по указанному индексу
x = [9, 8, 7, 6, 5]
x.insert(1, 7)
print(x) # OUT: [9, 7, 8, 7, 6, 5]

# метод .count() подсчитывает элементы в списке
x = [9, 8, 7, 6, 5]
x.count(7) # вызов метода .count() НИ ЧЕГО не выводит напечать
# при оборачивании в print() показывает сколько одинаковых элементов в списке. Можно сохранить в переменную
print(x.count(7)) # OUT: 1
print(x) # OUT: [9, 8, 7, 6, 5]

# метод .sort() сортирует элементы в списке по возрастанию (без указания доп. параметров)
x = [9, 8, 7, 6, 5]
x.sort()
print(x) # OUT: [5, 6, 7, 8, 9]

# метод .reverse() переворачивает элементы в списке
x = [9, 8, 7, 6, 5]
x.reverse()
print(x) # OUT: [5, 6, 7, 8, 9]

# метод .pop() выпихивает элемент с конца списка
x = [9, 8, 7, 6, 5]
x.pop(2) # удаляет (выпихивает) элемент в списке по указанному индексу с КОНЦА СПИСКА
x.pop() # если не указывать индеск удаляет (выпихивает) ПОСЛЕДНИЙ элемент в списке
# оборачивание в print() показывает какой элемент удален (выпихнут). Можно сохранить в переменную.
print(x.pop(2)) # OUT: 6
print(x.pop()) # OUT: 8
# со списка выпихнуто четыре элемента, выводим остаток
print(x) # OUT: [9]

# метод .remove() удаляет конекретный элемент в списке
x = [9, 8, 7, 6, 5, 8]
x.remove(8) # итерация списка слева направо, т.е. удалит первую 8
print(x) # OUT: [9, 7, 6, 5, 8]
x.remove(2) # вызовет ошибку: ValueError: list.remove(x): x not in list
# Чисел 8 в списке не осталось, удалять не чего, поэтому выводит None
print(x.remove(8)) # OUT: None

# метод .clear() очищает список от всех элементов
x = [9, 8, 7, 6, 5]
x.clear()
print(x) # OUT: []

# метод .extend([]) если список пуст, добавляет в него элементы из другого списка
x = []
x.extend([9, 8, 7, 6, 5])
print(x) # OUT: [9, 8, 7, 6, 5]

# метод .copy() копирует список в переменную, скопированный список сохраняется в переменную
x = [9, 8, 7, 6, 5]
tmp = x.copy() # 
print(x) # OUT: [9, 8, 7, 6, 5]
print(tmp) # OUT: [9, 8, 7, 6, 5]


# Практика_1.
# Склеить пустой список 'm' из элементов последовательности (списка 'n') от 0 до 9. Число 8 пропустить.
n = list(range(10))
m = []

for i in n:
    if i == 8: # при i = 8 не выполняется m.append(i)
        continue
    m.append(i) # добавляет i элемент в конец списка
else:
    print(m) # OUT: [0, 1, 2, 3, 4, 5, 6, 7, 9]


# Практика_2.
# Склеить пустой список 'm' из четных элементов последовательности (списка 'n') от 1 до 20.
# Нечетные элементы удалить из списка 'n'. Сохранить элементы списка 'n' в список p.
n = list(range(1, 21))
p = n # 1.Одна переменная ссылается на другую. Такой метод НЕ сработает.
p = n.copy() # 2.Копирование элементов. Такой метод сработает.
p = n[::] # 3.Срез списка. Такой метод сработает.
m = []

for i in n:
    # при делении i по модулю на 2. Возвращает остаток при делении.
    # 3 % 2 = 1; 2 % 2 = 0
    if i % 2 == 0:
        m.append(i)
        n.remove(i)
else:
    print(m) # OUT: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
    print(n) # OUT: [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]

# Переменная 'p' ссылается на переменную 'n', если p = n. Если не применять метод .copy(),
# т.е. не поместить элементы списка 'n' в переменную 'p', то список 'p' будет аналогичен
# списку 'n'. Если применить срез списка [start:stop:step], то список скопируется.
print(p) # OUT: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
