# Python_Hub_Studio
# Python_7_Hours

# СЛОВАРИ.
# !!! СЛОВАРЬ ОТНОСИТСЯ К ИЗМЕНЯЕМЫМ ТИПАМ ДАННЫХ !!!

# Варианты и методы.
# Способы создания словарей:

# 1.при помощи литерала {} "фигурные скобки"
d1 = {"a": 7}
# 2.при помощи функции dict()
d2 = dict()
# 3.при помощи метода .fromkeys()
d3 = dict.fromkeys("1")

# Вывод словаря на печать
d1 = {"a": 7}
print(d1) # OUT: {"a": 7}

# Вывод на печать значения по ключу
d1 = {"a": 7}
print(d1["a"]) # OUT: 7

# Добавить новое значение в словать
d1 = {"a": 7}
d1["b"] = 9
print(d1) # OUT: {'a': 7, 'b': 9}

# Поменять значение по ключу
d1 = {"a": 7}
d1["a"] = 8
print(d1) # OUT: {"a": 8}

# Если вызвать значение по несуществующему ключу возникает ошибка
d1 = {"a": 7}
print(d1["c"]) # OUT: KeyError: 'c'

# Удаление из словаря элемента по ключу
d1 = {'a': 7, 'b': 9}
print(d1) # OUT: {'a': 7, 'b': 9}
del d1["b"] # удаление элемента по ключу
print(d1) # OUT: {'a': 7}

# Использование функции dict()
d2 = dict(a=7)
print(d2) # OUT: {'a': 7}

# Добавлять пары ключ-значение можно бесконечное кол-во раз через запятую.
d2 = dict(a=7, b=8, c=10)
print(d2) # OUT: {'a': 7, 'b': 8, 'c': 10}

# Использование метода .fromkeys() позволяет создавать словарь, состоящий  из ключей
# со знаениями ПО УМОЛЧАНИЮ
d3 = dict.fromkeys([1, 2, 3, 4, 5]) # по ключам отсутствие данных
print(d3) # OUT: {1: None, 2: None, 3: None, 4: None, 5: None}

# добавим значения ПО УМОЛЧАНИЮ
d3 = dict.fromkeys([1, 2, 3, 4, 5], "value") # по ключам значение "value"
print(d3) # OUT: {1: 'value', 2: 'value', 3: 'value', 4: 'value', 5: 'value'}

# Каталог товаров магазина и их стоимотсь в USD.
# Для подсчета суммарной стоимости водить значения (ключи) ТОЛЬКО ИЗ СЛОВАРЯ!
from rich import print


catalog = {"meat": 3, "bread": 1, "potato": 0.5, "water": 0.2}

def buy():
	'''Функция подсчитывает суммарную стоимость продуктовой корзины'''
	price = 0
	while True:
		# вводить значения (ключи) ТОЛЬКО ИЗ СЛОВАРЯ ("catalog")!
		enter = input("Select a product from the catalog?\n")
		# если вводим значения ИЗ СЛОВАРЯ ("catalog"), то цена добавляется к
		# суммарной стоимости продуктовой корзины
		if enter in catalog:
			price += catalog[enter]	
			print("[bold green]The product has been added[/]")
		# ввод значения НЕ ИЗ СЛОВАРЯ ("price") вызывает ошибку	
		elif enter not in catalog and enter != "end" and enter != "help":
			print("[bold red]Error! Product is out of catalog[/]")
		# вызов просмотра каталога
		elif enter == "help":
			print("[bold magenta]View function[/]")
			print(catalog)
		# закончить добавление и выход при помощи ввода ключевого слова "end"
		elif enter == "end":
			break
		# неизвестная ошибка
		else:
			print("[bold red]UNKNOWN ERROR[/]")
	# вывод на печать суммарной стоимости
	print("[bold cyan]The total cost is "+str(price)+" USD[/]")
	return price


# run
buy()

# Словарь-авторизация пользователей
# Пример вложенного словаря (словарь в словаре)
users = {
	"Alex7": {"password": 9856214, "id": 1957},
	"Jimmy99": {"password": 1236487, "id": 9654},
	"Bob33": {"password": 9546752, "id": 6453}
	}

# обращаемся к ключу "password" вложенного словаря
print(users["Alex7"]["password"]) # OUT: 9856214

# Функция dict() является конвертирующей функцией, т.е. создает словарь из списков, 
# в которых есть вложенные списки
# 1, 3, 5 - key
# 2, 4, 6 - value
d2 = dict([[1, 2], [3, 4], [5, 6]])
print(d2) # OUT: {1: 2, 3: 4, 5: 6}


# МЕТОДЫ СЛОВАРЕЙ
d1 = {'a': 7, 'b': 9}

# Метод .clear() очищает словарь
d1.clear()

# Метод .fromkeys() создает словарь, состоящий из ключей со знаениями ПО УМОЛЧАНИЮ
d1.fromkeys()

# Метод .copy() копирует словарь в новую переменную
d4 = d1.copy()

# !!! СЛОВАРЬ ОТНОСИТСЯ К ИЗМЕНЯЕМЫМ ТИПАМ ДАННЫХ !!!
# если переменная 'd1' ссылается на переменную 'd4' и сделать изменения в переменной 'd1', то
# изменения коснутся и переменной 'd4'
d1 = {'a': 7, 'b': 9}

d4 = d1 # ПЕРЕМЕННЫЕ ССЫЛАЮТСЯ ДРУГ НА ДРУГА
print(d1) # OUT: {'a': 7, 'b': 9}
print(d4) # OUT: {'a': 7, 'b': 9}

# очистим словарь d1
d1.clear()
print(d1) # OUT: {} 
print(d4) # OUT: {}

d1 = {'a': 7, 'b': 9}
# если переменная d1 копируются в переменную d4 и сделать изменения в переменной d1, то
# изменения НЕ коснутся переменной d4

d4 = d1.copy() # КОПИРОВАНИЕ ЗНАЧЕНИЯ ПЕРЕМЕННОЙ ОДНОЙ В ДРУГУЮ
print(d1) # OUT:{'a': 7, 'b': 9}
print(d4) # OUT:{'a': 7, 'b': 9}

# очистим словарь d1
d1.clear()
print(d1) # OUT: {} 
print(d4) # OUT: {'a': 7, 'b': 9} 

# Метод .items() возвращает список из кортежей, в каждом кортеже пара значений
# Данный метод .items() применяется для итерации словаря с помощью цикла for
d1 = {'a': 7, 'b': 9}
# вывод: dict_items([('a', 7), ('b', 9)])
print(d1.items())

# Метод .keys() возвращает ключи в словаре в виде списка
# Данный метод .keys() применяется для итерации словаря с помощью цикла for
d1 = {'a': 7, 'b': 9}
print(d1.keys()) # OUT: dict_keys(['a', 'b'])

# Метод .values() возвращает значения в словаре в виде списка
# Данный метод .values() применяется для итерации словаря с помощью цикла for
d1 = {'a': 7, 'b': 9}
print(d1.values()) # OUT: dict_values([7, 9])

# Метод .update() позволяет добавить пары ключ-значение из одного словаря в другой
# добавим пары ключ-значение из словаря 'd4' в словарь 'd1'
d1 = {'a': 7, 'b': 9}
d4 = {1: 2, 3: 4, 5: 6}

d1.update(d4)
print(d1) # OUT: {'a': 7, 'b': 9, 1: 2, 3: 4, 5: 6} 
print(d4) # OUT: {1: 2, 3: 4, 5: 6}

# Если использоварь метод .update() и при этом значения в словаре 'd1' совпадают со
# значениями в сорваре 'd4', то они переписываются на значения из словаря 'd4', а затем
# добавляются значения из словаря 'd4'
# добавим пары ключ-значение из словаря 'd4' в словарь 'd1'
d1 = {'a': 7, 'b': 9, 3: 122}
d4 = {1: 2, 3: 4, 5: 6}

d1.update(d4)
print(d1) # OUT: {'a': 7, 'b': 9, 3: 4, 1: 2, 5: 6}
print(d4) # OUT: {1: 2, 3: 4, 5: 6}

# Метод .get() запрашивает ключи из словаря (если ключ в нем имеется)
# если ключа в кловаре нет, то получаем отсутствие данных
d1 = {'a': 7, 'b': 9}
x = d1.get("c")
print(x) # OUT: None

# Если ключа в кловаре нет, мы можем вызварь метод .get() и добавить свое значение
d1 = {'a': 7, 'b': 9}
x = d1.get("c", "value")
print(x) # OUT: value

# Метод .pop() удаляет значение и позваляет вернуть это значение в переменную
d1 = {'a': 7, 'b': 9}
print(d1) # OUT: {'a': 7, 'b': 9}

# выталкиваем значение по ключу 'b' и записываем в переменную 'x'
x = d1.pop("b")
print(x, d1) # OUT: 9, {'a': 7}
