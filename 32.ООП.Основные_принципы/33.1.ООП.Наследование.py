# Python_Hub_Studio
# Python ООП уроки для начинающих с нуля, курс python ООП за три урока.
# Урок_№2.Наследование.

"""
'обьект' - единица информации в памяти
'класс' - инструкция по созданию обьектов определенного типа
'экземпляр' - конкретный обьект какого-либо класса
'метод' - функция в классе для воздействия на обьект
'поля или свойства' - переменные в классе
'атрибуты' - все имена в классе (переменных и методов)
"""

# Наследование классов. Импортируем из собственного модуля class3 и из него наследуем классы.
from class3 import Verification


# Создадим класс V2, потомок класса Verification.
class V2(Verification):
	'''Класс V2 потомок родителя Verification.
	ПОЛНОСТЬЮ наследуется от Verification'''
	pass

# При попытке ввести пароль меньше 8 символов программа вылетает с ошибкой
# x = V2("John", "1234567")
# OUT: ValueError: Слабый пароль

# Создание экземпляра класса V2
x = V2("John", "123456789")

# метод save() записывает данные в файл (применяется дозапись "a").
x.save()


# Создадим класс V3, потомок класса Verification и дополним его свойства и методы.
# Используется переопределение (дополнение/коррекция) методов __init__() и save() в производном классе.
class V3(Verification):
	'''Класс V3 потомок родителя Verification'''

	# переопределение (дополнение/коррекция) метода __init__()
	def __init__(self, login, password, age):
		# вызываем метод __init__() из класса Verification - ЭТО ПРОСТОЕ НАСЛЕДОВАНИЕ
		Verification.__init__(self, login, password)
		# свойство экземпляра класса берется из параметра age 
		self.age = age
		# сохранение данных вызываем в конструкторе, т.е. при создании экземпляра класса
		self.__save()


	def show(self):
		'''Метод возвращает данные в виде кортежа (login, password).
		Уникальный метод (не наследуется от класса родителя)'''
		return self.login, self.password


	# переопределение (дополнение/коррекция) метода save()
	def __save(self):
		'''Выполняется проверка пользовательских данных на уникальность, если проварка
		провалена возбуждается исключение ValueError. Из класса Verification
		вызывается метод save(), позволяющий записать данные в файл.
		К методу применена инкапсуляция. Метод используется только в классе'''
		with open("path_to_file\\Users.txt") as r:
			for i in r:
				if f"{self.login, self.password}" + "\n" == i:
					raise ValueError("Ошибка авторизации. Пользатель уже существует.")
		Verification.save(self) # - ЭТО ПРОСТОЕ НАСЛЕДОВАНИЕ от класса родителя


# Создание экземпляра класса V3
y = V3("Mark", "987654321", 23)

# Метод save() записывает данные ('пользователь', 'пароль') в файл.
# Вызов метода закомментирован, т.к. прописан в конструкторе __init__(), вызывается при создании
# экземпляра класса V3.
# y.save()

# При повторной попытке записать данные в файл:
# y.save() # OUT: ValueError: Ошибка авторизации. Пользатель уже существует.

# Метод show() возвращает данные ('пользователь', 'пароль'), которые можно вывести при помощи
print() в консоль
print(y.show())

# Создание экземпляра класса
z = V3("Andrew", "7172737475", 35) 
# Метод show() возвращает данные ('пользователь', 'пароль'), которые можно вывести при помощи
# print() в консоль
print(z.show())


# Создадим класс V4, потомок класса Verification и дополним его свойства и методы.
# Метод super() осуществляет поиск методов в родительских классах. Параметр 'self' передается автоматически
# при вызове метода super(), поэтому в __init__(login, password) и в save() он отсутствует
class V4(Verification):
	'''Класс V4 потомок родителя Verification'''

	# переопределение (дополнение/коррекция) метода __init__()
	def __init__(self, login, password, age):

		# вызываем метод __init__() из класса Verification - ЭТО super() НАСЛЕДОВАНИЕ
		super().__init__(login, password)
		# свойство экземпляра класса берется из параметра age 
		self.age = age
		# сохранение данных вызываем в конструкторе, т.е. при создании экземпляра класса
		self.__save()


	def show(self):
		'''Метод возвращает данные в виде кортежа (login, password).
		Уникальный метод (не наследуется от класса родителя)'''
		return self.login, self.password


	# переопределение (дополнение/коррекция) метода save()
	def __save(self):
		'''Выполняется проверка пользовательских данных на уникальность, если проварка
		провалена возбуждается исключение ValueError. Из класса Verification
		вызывается метод save(), позволяющий записать данные в файл.
		К методу применена инкапсуляция. Метод используется только в классе'''
		with open("path_to_file\\Users.txt") as r:
			for i in r:
				if f"{self.login, self.password}" + "\n" == i:
					raise ValueError("Ошибка авторизации. Пользатель уже существует.")
		super().save() # - ЭТО super() НАСЛЕДОВАНИЕ


# Создание экземпляра класса V4
y2 = V4("Bob", "111111111", 23)

# Метод show() возвращает данные ('пользователь', 'пароль'), которые можно вывести при помощи
# print() в консоль
print(y2.show())

# Создание экземпляра класса V4
z2 = V4("Fred", "333333333", 35) 

# Метод show() возвращает данные ('пользователь', 'пароль'), которые можно вывести при помощи
# print() в консоль
print(z2.show())
