# Python_Hub_Studio
# Python ООП уроки для начинающих с нуля, курс python ООП за три урока.
# Урок_№1.Инкапсуляция.

"""
'обьект' - единица информации в памяти
'класс' - инструкция по созданию обьектов определенного типа
'экземпляр' - конкретный обьект какого-либо класса
'метод' - функция в классе для воздействия на обьект
'поля или свойства' - переменные в классе
'атрибуты' - все имена в классе (переменных и методов)
"""

# На примере создания электронного кошелька.

class Purse():
    '''Класс Purse (кошелек)'''

    # Имя класса начинаеся с буквы в верхнем регистре.
    # Тело класса состоит из методов (функций).
    # Метод класса ВСЕГДА первым параметром принимает 'self'.

    number = 0 # переменная класса, показывает количество активных кошельков
    # currency = "USD" # если необходимо установить валюту по умолчанию (далее исп. в параметре __init__)

    def __init__(self, currency: str, name: str="Unknown"):
        '''Метод класса Purse. Конструктор кошелька. Код метода __init__ выполняется,
        когда создается экземпляр класса'''
        if currency not in "USD":
            raise ValueError ("Недопустимые данные в поле 'валюта'")
        self.__money = 0.00
        self.name = name
        self.currency = currency
        print(f"Создан кошелек с именем '{name}'")
        Purse.number += 1
        print("Активных кошельков:", Purse.number)


    def top_up_balance(self, how_much: float, currency: str):
        '''Метод класса Purse. Пополняет баланс кошелька'''
        if currency != self.currency:
            raise ValueError ("Валюта указана не верно.")
        if how_much > 0:
            self.__money += how_much
        return how_much


    def top_down_balance(self, how_much: float, currency: str):
        '''Метод класса Purse. Списывает средства с баланса кошелька'''
        if self.currency != currency:
            raise ValueError ("Валюта указана не верно.")
        if how_much > 0:
            self.__money -= how_much
            if self.__money < 0:
                print("Недостаточно средств для списания!")
                # при попытке списания средств, превышающих баланс возбуждаем собственное исключение 'ValueError'
                raise ValueError ("Отрицательный баланс не допустим!")
        return how_much


    def info(self):
        '''Метод класса Purse. Выводит информацию о баланса кошелька'''
        return self.__money


    # статический метод не меняет состояния класса и экземпляра
    @staticmethod 
    def howMuch():
        '''Метод класса Purse. Выводит количество активных кошельков (экземпляров класса Purse)'''
        print("Применен 'staticmethod howMuch'. Активных кошельков:", Purse.number)

    # альтернативный перевод в статический метод (без декоратора):
    # howMuch = staticmethod(howMuch)


    def __del__(self):
        '''Метод класса Purse. Деструктор кошелька. Код метода __del__ выполняется, когда
        удаляется экземпляр класса и когда завершается программа'''
        Purse.number -= 1
        print("Кошелек удален. Активных кошельков:", Purse.number)


# При создании экземпляра класса передается имя в качестве аргумента, НО если не передать в параметр имя
# по умолчанию name="Unknown" и при этом забыть передать имя в качестве аргумента, ТО программа вылетит
# с исключением:
# TypeError: __init__() missing 1 required positional argument: 'name'

# Создаем два экземпляра класса Purse - 'x' и 'y'. На кошельке 'x' будет храниться валюта в USD, а на 'y' - в EUR.
# В экземпляр класса Purse 'x' передаем имя, а экземпляр класса Purse 'y' получает имя по умолчанию name="Unknown".
# OUT: Кошелек Andrey создан
#      Активных кошельков: 1
x = Purse("USD", "Andrey")
# OUT: Кошелек Unknown создан
#      Активных кошельков: 2
y = Purse("USD")

# при попытке создать кошелек с валютой "EUR"
# y = Purse("EUR") # OUT: raise ValueError ("Недопустимые данные в поле 'валюта'")

# изменение валюты кошелька 'y' на EUR
y.currency = "EUR"

# Проверка 'x' на тип данных
# класс пользователя
print(type(x)) # OUT: <class '__main__.Purse'>

# Пополним баланс кошелькам 'x' и 'y', т.е. ИЗМЕНИМ ЗНАЧЕНИЯ. Было бы возожно, если к 'money' НЕ
# применялась ИНКАПСУЛЯЦИЯ (в нашем случае применялась self.__money = 0.00)
x.money = 100
y.money = 200

# Поскольку метод .info() возвращает количество денег на кошельке, это значение можно сохранить в переменную.
# Если значение 'money' изменяется, то далее информация, схораненная в переменной 'a' или 'b' не актуальна.
a = x.info()
b = y.info()

# Выводим информацию о кошельках 'x' и 'y'.
print("Баланс кошелька 'Andrey':", a, x.currency) # OUT: Баланс кошелька 'Andrey': 0.0 USD
print("Баланс кошелька 'Unknown':", b, y.currency) # OUT: Баланс кошелька 'Unknown': 0.0 EUR

# Добавим в тело класса 'Purse' метод top_up_balance() и пополним средства на кошельках. Такой метод
# позволяет пополнять баланс на кошельках, ДАЖЕ если к money применена ИНКАПСУЛЯЦИЯ self.__money = 0.00.
x.top_up_balance(300, "USD")
y.top_up_balance(300, "EUR")

# Теперь баланс на кошельках 'x' и 'y' имеет одинаковую сумму 300, но средства в разных валютах.
# Выводим информацию о кошельках 'x' и 'y'.
print("Баланс кошелька 'Andrey':", x.info(), x.currency) # OUT: Баланс кошелька 'Andrey': 300.0 USD
print("Баланс кошелька 'Unknown':", y.info(), y.currency) # OUT: Баланс кошелька 'Unknown': 300.0 EUR

# Добавим в тело класса Purse метод top_down_balance() и спишим средства с кошельков по 200.
x.top_down_balance(200, "USD")
y.top_down_balance(200, "EUR")

# Выводим информацию о кошельках 'x' и 'y'. Баланс составляет по 100.
print("Баланс кошелька 'Andrey':", x.info(), x.currency) # OUT: Баланс кошелька 'Andrey': 100.0 USD
print("Баланс кошелька 'Unknown':", y.info(), y.currency) # OUT: Баланс кошелька 'Unknown': 100.0 EUR

# Выводим информацию о количестве активных кошельков (до удаления кошельков 'x' и 'y' равняется 2).
Purse.howMuch() # Применен 'staticmethod howMuch'. Активных кошельков: 2

# Удаление экземпляра класса (удаление закоментировано, т.к. кошельки используются далее)
# del x
# del y

# Выводим информацию о количестве активных кошельков (после удаления кошельков 'x' и 'y' изменится на 0).
# Purse.howMuch() # Применен 'staticmethod howMuch'. Активных кошельков: 0


# ИНКАПСУЛЯЦИЯ - защита данных. Если инкапсулировать деньги, т.е. 'money' превратить в '__money',
# то в коде будет невозможно получить доступ к 'money'. Доступ возможно получить ТОЛЬКО ИЗ КЛАССА.
# x.money = 100 - не работает, x.top_down_balance(100) - работает
x.money = 500
y.money = 500
# и так тоже не сработает
x.__money = 500
y.__money = 500

# Выводим информацию о кошельках 'x' и 'y'. Баланс по прежнему составляет по 100.
print("Баланс кошелька 'Andrey':", x.info(), x.currency) # OUT: Баланс кошелька 'Andrey': 100.0 USD
print("Баланс кошелька 'Unknown':", y.info(), y.currency) # OUT: Баланс кошелька 'Unknown': 100.0 EUR

# В конструкторе __init__ класса Purse добавим исключение на проверку валюты и попробуем перевести
# средства из одного кошелько на другой. Пополним средства кошелька 'x' кошельком 'y'.
# При передаче валюты из одного кашелка на другой предполагается конвертация USD - EUR, либо EUR - USD.
# По скольку методы top_up_balance() и top_down_balance() возвращают численное значение, результат возврата
# можно обернуть конвертирующей функцией (в данном примере не реализовано).
x.top_up_balance(y.top_down_balance(100, "EUR"), "USD")

# Выводим информацию о кошельках 'x' и 'y'.
print("Баланс кошелька 'Andrey':", x.info(), x.currency)  # OUT: Баланс кошелька 'Andrey': 200.0 USD
print("Баланс кошелька 'Unknown':", y.info(), y.currency) # OUT: Баланс кошелька 'Unknown': 0.0 EUR

# завершение программы
# OUT: Кошелек удален. Активных кошельков: 1
#      Кошелек удален. Активных кошельков: 0
