# Python_Hub_Studio
# Python_7_Hours

# ГЕНЕРАТОРЫ списков, словарей, множеств.

h = [9, 8, 7, 4, 5, 6, 3, 2, 1, 5, 5]
# На основе списка 'h' требуется создать новый список 'new_h', элементы которого увеличены двовое. Затем
# отсортировать.
new_h = []
for i in h:
    new_h.append(i*2)

new_h.sort()
print(new_h) # OUT: [2, 4, 6, 8, 10, 10, 10, 12, 14, 16, 18]

# Синтасис генератора списков. Более короткая запись. Создание списка 'h2', затем итерирование списка 'h'
# (вместо трех строк получается одна).
new_h2 = [i*2 for i in h]

new_h2.sort()
print(new_h2) # OUT: [2, 4, 6, 8, 10, 10, 10, 12, 14, 16, 18]

# Создадим множество. Множество создается, не смотря на то, что редактор кода выделяет 'for'.
# ИЗ МНОЖЕСТВА УДАЛЯЮТСЯ ПОВТОРЯЮЩИЕСЯ ЭЛЕМЕНТЫ (повторяющиеся 10 удалены).
new_z = {i*2 for i in h}
print(new_z) # OUT: {2, 4, 6, 8, 10, 12, 14, 16, 18}

# Создадим словарь. В методе происходит присвоение пары ключ: значение.
# ИЗ СЛОВАРЯ УДАЛЯЮТСЯ ПОВТОРЯЮЩИЕСЯ ЭЛЕМЕНТЫ (повторяющиеся 10 удалены). 
new_d = {i: i*2 for i in h}
print(new_d) # OUT: {9: 18, 8: 16, 7: 14, 4: 8, 5: 10, 6: 12, 3: 6, 2: 4, 1: 2}


# ГЕНЕРАТОРЫ списков, словарей, множеств. УСЛОВИЯ.

h = [9, 8, 7, 4, 5, 6, 3, 2, 1, 5, 5]
# На основе списка h требуется создать новый список new_h. Добавить условие если элемент списка четное число i % 2 == 0, 
# то добавлять в новый список new_h. Затем отсортировать.

new_h = []
for i in h:
    if i % 2 == 0:
        new_h.append(i)

new_h.sort()
print(new_h) # OUT: [2, 4, 6, 8]

# В ГЕНЕРАТОРЕ МОЖНО ЗАПИСАТЬ УЛОВИЕ (четыре строки превращаются в одну).
new_g = [i for i in h if i % 2 == 0]
new_g.sort()
print(new_g) # OUT: [2, 4, 6, 8]
# По ТИПУ ДАННЫХ
print(type(new_g)) # OUT: <class 'list'>


# ГЕНЕРАТОРЫ списков, словарей, множеств. СЛОЖНЫЕ КОНСТРУКЦИИ (ВЛОЖЕННЫЕ УСЛОВИЯ).

h = [9, 8, 7, 4, 5, 6, 3, 2, 1, 5, 5, -1, -6, -8]
# На основе списка h требуется создать новый список new_h. Добавить условие если элемент списка четное число i % 2 == 0, 
# то добавлять в новый список new_h. Значения меньше 0 отбросить. Затем отсортировать.

new_h2 = []
for i in h:
    if i % 2 == 0:
        if i > 0:
            new_h2.append(i)

new_h2.sort()
print(new_h2) # OUT: [2, 4, 6, 8]

# В ГЕНЕРАТОРЕ МОЖНО ЗАПИСАТЬ УЛОВИЕ И ВЛОЖЕННОЕ УСЛОВИЕ (пять строк превращаются в одну).
new_g2 = [i for i in h if i % 2 == 0 and i > 0]
new_g2.sort()
print(new_g2) # OUT: [2, 4, 6, 8]


# С помощью генератора списком напишем парсер, который создаст список со всеми путями до каждого файла из пути my_path
import os


my_path = "path_to_files"

#g = [os.path.join(z, i) for z, x, c in os.walk(my_path) for i in c]

# Если файлов очень много, можно создать дополнительное условие для вывода информации.
# далее добавим условие отбора "выводить только файлы с разрешение .txt"
#g = [os.path.join(z, i) for z, x, c in os.walk(my_path) for i in c if ".txt" in i]

# если строка генератора очень длинная, синтаксис генератора позволяет переводить на новую строку.
g = [os.path.join(z, i)
for z, x, c in os.walk(my_path)
for i in c if ".txt" in i]
print(g)

# Напишем генератор создания словаря на основании другого словаря

price = {"meat": 3, "bread": 1, "potato": 0.5, "water": 0.2}

# Добавить скидку 15% на товары из каталога.
new_price = {}
for i in price:
    new_price[i] = price[i] * 0.85

print(new_price) # OUT: {'meat': 2.55, 'bread': 0.85, 'potato': 0.425, 'water': 0.17}

# реализуем при помощи генератора аналогичный метод и добавим ещё одну скидку в 15%.
new_d = {i: round(new_price[i] * 0.85, 3) for i in new_price.keys()}

print(new_d) # OUT: {'meat': 2.167, 'bread': 0.722, 'potato': 0.361, 'water': 0.145}
